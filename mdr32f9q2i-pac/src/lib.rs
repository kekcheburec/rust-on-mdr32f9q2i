#![doc = "Peripheral access API for MDR32F9Q2I microcontrollers (generated using svd2rust v0.19.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.19.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn CAN1_IRQ();
    fn CAN2_IRQ();
    fn USB_IRQ();
    fn DMA_IRQ();
    fn UART1_IRQ();
    fn UART2_IRQ();
    fn SSP1_IRQ();
    fn I2C_IRQ();
    fn POWER_IRQ();
    fn WWDG_IRQ();
    fn TIMER1_IRQ();
    fn TIMER2_IRQ();
    fn TIMER3_IRQ();
    fn ADC_IRQ();
    fn COMPARATOR_IRQ();
    fn SSP2_IRQ();
    fn BACKUP_IRQ();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 28] = [
    Vector { _handler: CAN1_IRQ },
    Vector { _handler: CAN2_IRQ },
    Vector { _handler: USB_IRQ },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: DMA_IRQ },
    Vector {
        _handler: UART1_IRQ,
    },
    Vector {
        _handler: UART2_IRQ,
    },
    Vector { _handler: SSP1_IRQ },
    Vector { _reserved: 0 },
    Vector { _handler: I2C_IRQ },
    Vector {
        _handler: POWER_IRQ,
    },
    Vector { _handler: WWDG_IRQ },
    Vector { _reserved: 0 },
    Vector {
        _handler: TIMER1_IRQ,
    },
    Vector {
        _handler: TIMER2_IRQ,
    },
    Vector {
        _handler: TIMER3_IRQ,
    },
    Vector { _handler: ADC_IRQ },
    Vector { _reserved: 0 },
    Vector {
        _handler: COMPARATOR_IRQ,
    },
    Vector { _handler: SSP2_IRQ },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: BACKUP_IRQ,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - CAN1_IRQ"]
    CAN1_IRQ = 0,
    #[doc = "1 - CAN2_IRQ"]
    CAN2_IRQ = 1,
    #[doc = "2 - USB_IRQ"]
    USB_IRQ = 2,
    #[doc = "5 - DMA_IRQ"]
    DMA_IRQ = 5,
    #[doc = "6 - UART1_IRQ"]
    UART1_IRQ = 6,
    #[doc = "7 - UART2_IRQ"]
    UART2_IRQ = 7,
    #[doc = "8 - SSP1_IRQ"]
    SSP1_IRQ = 8,
    #[doc = "10 - I2C_IRQ"]
    I2C_IRQ = 10,
    #[doc = "11 - POWER_IRQ"]
    POWER_IRQ = 11,
    #[doc = "12 - WWDG_IRQ"]
    WWDG_IRQ = 12,
    #[doc = "14 - Timer1_IRQ"]
    TIMER1_IRQ = 14,
    #[doc = "15 - Timer2_IRQ"]
    TIMER2_IRQ = 15,
    #[doc = "16 - Timer3_IRQ"]
    TIMER3_IRQ = 16,
    #[doc = "17 - ADC_IRQ"]
    ADC_IRQ = 17,
    #[doc = "19 - COMPARATOR_IRQ"]
    COMPARATOR_IRQ = 19,
    #[doc = "20 - SSP2_IRQ"]
    SSP2_IRQ = 20,
    #[doc = "27 - BACKUP_IRQ"]
    BACKUP_IRQ = 27,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "CAN1 interface controller registers"]
pub struct MDR_CAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_CAN1 {}
impl MDR_CAN1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_can1::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_can1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_CAN1 {
    type Target = mdr_can1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_CAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_CAN1").finish()
    }
}
#[doc = "CAN1 interface controller registers"]
pub mod mdr_can1;
#[doc = "CAN2 interface controller registers"]
pub struct MDR_CAN2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_CAN2 {}
impl MDR_CAN2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_can1::RegisterBlock = 0x4000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_can1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_CAN2 {
    type Target = mdr_can1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_CAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_CAN2").finish()
    }
}
#[doc = "USB interface controller registers"]
pub struct MDR_USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_USB {}
impl MDR_USB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_usb::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_usb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_USB {
    type Target = mdr_usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_USB").finish()
    }
}
#[doc = "USB interface controller registers"]
pub mod mdr_usb;
#[doc = "Flash programm memory interface controller registers"]
pub struct MDR_EEPROM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_EEPROM {}
impl MDR_EEPROM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_eeprom::RegisterBlock = 0x4001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_eeprom::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_EEPROM {
    type Target = mdr_eeprom::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_EEPROM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_EEPROM").finish()
    }
}
#[doc = "Flash programm memory interface controller registers"]
pub mod mdr_eeprom;
#[doc = "RST_CLK"]
pub struct MDR_RST_CLK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_RST_CLK {}
impl MDR_RST_CLK {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_rst_clk::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_rst_clk::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_RST_CLK {
    type Target = mdr_rst_clk::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_RST_CLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_RST_CLK").finish()
    }
}
#[doc = "RST_CLK"]
pub mod mdr_rst_clk;
#[doc = "DMA controller registers"]
pub struct MDR_DMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_DMA {}
impl MDR_DMA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_dma::RegisterBlock = 0x4002_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_dma::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_DMA {
    type Target = mdr_dma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_DMA").finish()
    }
}
#[doc = "DMA controller registers"]
pub mod mdr_dma;
#[doc = "UART1 interface controller registers"]
pub struct MDR_UART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_UART1 {}
impl MDR_UART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_uart1::RegisterBlock = 0x4003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_UART1 {
    type Target = mdr_uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_UART1").finish()
    }
}
#[doc = "UART1 interface controller registers"]
pub mod mdr_uart1;
#[doc = "UART2 interface controller registers"]
pub struct MDR_UART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_UART2 {}
impl MDR_UART2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_uart1::RegisterBlock = 0x4003_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_UART2 {
    type Target = mdr_uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_UART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_UART2").finish()
    }
}
#[doc = "SSP1 interface controller registers"]
pub struct MDR_SSP1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_SSP1 {}
impl MDR_SSP1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_ssp1::RegisterBlock = 0x4004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_ssp1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_SSP1 {
    type Target = mdr_ssp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_SSP1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_SSP1").finish()
    }
}
#[doc = "SSP1 interface controller registers"]
pub mod mdr_ssp1;
#[doc = "SSP2"]
pub struct MDR_SSP2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_SSP2 {}
impl MDR_SSP2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_ssp1::RegisterBlock = 0x400a_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_ssp1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_SSP2 {
    type Target = mdr_ssp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_SSP2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_SSP2").finish()
    }
}
#[doc = "I2C interface controller registers"]
pub struct MDR_I2C {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_I2C {}
impl MDR_I2C {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_i2c::RegisterBlock = 0x4005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_i2c::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_I2C {
    type Target = mdr_i2c::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_I2C {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_I2C").finish()
    }
}
#[doc = "I2C interface controller registers"]
pub mod mdr_i2c;
#[doc = "POWER"]
pub struct MDR_POWER {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_POWER {}
impl MDR_POWER {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_power::RegisterBlock = 0x4005_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_power::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_POWER {
    type Target = mdr_power::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_POWER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_POWER").finish()
    }
}
#[doc = "POWER"]
pub mod mdr_power;
#[doc = "WWDT"]
pub struct MDR_WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_WWDG {}
impl MDR_WWDG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_wwdg::RegisterBlock = 0x4006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_wwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_WWDG {
    type Target = mdr_wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_WWDG").finish()
    }
}
#[doc = "WWDT"]
pub mod mdr_wwdg;
#[doc = "IWDT"]
pub struct MDR_IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_IWDG {}
impl MDR_IWDG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_iwdg::RegisterBlock = 0x4006_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_iwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_IWDG {
    type Target = mdr_iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_IWDG").finish()
    }
}
#[doc = "IWDT"]
pub mod mdr_iwdg;
#[doc = "TIMER1"]
pub struct MDR_TIMER1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_TIMER1 {}
impl MDR_TIMER1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_timer1::RegisterBlock = 0x4007_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_timer1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_TIMER1 {
    type Target = mdr_timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_TIMER1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_TIMER1").finish()
    }
}
#[doc = "TIMER1"]
pub mod mdr_timer1;
#[doc = "TIMER2"]
pub struct MDR_TIMER2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_TIMER2 {}
impl MDR_TIMER2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_timer1::RegisterBlock = 0x4007_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_timer1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_TIMER2 {
    type Target = mdr_timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_TIMER2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_TIMER2").finish()
    }
}
#[doc = "TIMER3"]
pub struct MDR_TIMER3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_TIMER3 {}
impl MDR_TIMER3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_timer1::RegisterBlock = 0x4008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_timer1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_TIMER3 {
    type Target = mdr_timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_TIMER3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_TIMER3").finish()
    }
}
#[doc = "ADC"]
pub struct MDR_ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_ADC {}
impl MDR_ADC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_adc::RegisterBlock = 0x4008_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_adc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_ADC {
    type Target = mdr_adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_ADC").finish()
    }
}
#[doc = "ADC"]
pub mod mdr_adc;
#[doc = "DAC"]
pub struct MDR_DAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_DAC {}
impl MDR_DAC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_dac::RegisterBlock = 0x4009_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_dac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_DAC {
    type Target = mdr_dac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_DAC").finish()
    }
}
#[doc = "DAC"]
pub mod mdr_dac;
#[doc = "COMPARATOR"]
pub struct MDR_COMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_COMP {}
impl MDR_COMP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_comp::RegisterBlock = 0x4009_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_comp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_COMP {
    type Target = mdr_comp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_COMP").finish()
    }
}
#[doc = "COMPARATOR"]
pub mod mdr_comp;
#[doc = "PORTA"]
pub struct MDR_PORTA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_PORTA {}
impl MDR_PORTA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_porta::RegisterBlock = 0x400a_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_porta::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_PORTA {
    type Target = mdr_porta::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_PORTA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_PORTA").finish()
    }
}
#[doc = "PORTA"]
pub mod mdr_porta;
#[doc = "PORTB"]
pub struct MDR_PORTB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_PORTB {}
impl MDR_PORTB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_porta::RegisterBlock = 0x400b_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_porta::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_PORTB {
    type Target = mdr_porta::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_PORTB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_PORTB").finish()
    }
}
#[doc = "PORTC"]
pub struct MDR_PORTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_PORTC {}
impl MDR_PORTC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_porta::RegisterBlock = 0x400b_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_porta::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_PORTC {
    type Target = mdr_porta::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_PORTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_PORTC").finish()
    }
}
#[doc = "PORTD"]
pub struct MDR_PORTD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_PORTD {}
impl MDR_PORTD {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_porta::RegisterBlock = 0x400c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_porta::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_PORTD {
    type Target = mdr_porta::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_PORTD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_PORTD").finish()
    }
}
#[doc = "PORTE"]
pub struct MDR_PORTE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_PORTE {}
impl MDR_PORTE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_porta::RegisterBlock = 0x400c_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_porta::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_PORTE {
    type Target = mdr_porta::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_PORTE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_PORTE").finish()
    }
}
#[doc = "PORTF"]
pub struct MDR_PORTF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_PORTF {}
impl MDR_PORTF {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_porta::RegisterBlock = 0x400e_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_porta::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_PORTF {
    type Target = mdr_porta::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_PORTF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_PORTF").finish()
    }
}
#[doc = "BACKUP"]
pub struct MDR_BKP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_BKP {}
impl MDR_BKP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_bkp::RegisterBlock = 0x400d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_bkp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_BKP {
    type Target = mdr_bkp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_BKP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_BKP").finish()
    }
}
#[doc = "BACKUP"]
pub mod mdr_bkp;
#[doc = "EBC"]
pub struct MDR_EBC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDR_EBC {}
impl MDR_EBC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdr_ebc::RegisterBlock = 0x400f_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdr_ebc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDR_EBC {
    type Target = mdr_ebc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDR_EBC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDR_EBC").finish()
    }
}
#[doc = "EBC"]
pub mod mdr_ebc;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "MDR_CAN1"]
    pub MDR_CAN1: MDR_CAN1,
    #[doc = "MDR_CAN2"]
    pub MDR_CAN2: MDR_CAN2,
    #[doc = "MDR_USB"]
    pub MDR_USB: MDR_USB,
    #[doc = "MDR_EEPROM"]
    pub MDR_EEPROM: MDR_EEPROM,
    #[doc = "MDR_RST_CLK"]
    pub MDR_RST_CLK: MDR_RST_CLK,
    #[doc = "MDR_DMA"]
    pub MDR_DMA: MDR_DMA,
    #[doc = "MDR_UART1"]
    pub MDR_UART1: MDR_UART1,
    #[doc = "MDR_UART2"]
    pub MDR_UART2: MDR_UART2,
    #[doc = "MDR_SSP1"]
    pub MDR_SSP1: MDR_SSP1,
    #[doc = "MDR_SSP2"]
    pub MDR_SSP2: MDR_SSP2,
    #[doc = "MDR_I2C"]
    pub MDR_I2C: MDR_I2C,
    #[doc = "MDR_POWER"]
    pub MDR_POWER: MDR_POWER,
    #[doc = "MDR_WWDG"]
    pub MDR_WWDG: MDR_WWDG,
    #[doc = "MDR_IWDG"]
    pub MDR_IWDG: MDR_IWDG,
    #[doc = "MDR_TIMER1"]
    pub MDR_TIMER1: MDR_TIMER1,
    #[doc = "MDR_TIMER2"]
    pub MDR_TIMER2: MDR_TIMER2,
    #[doc = "MDR_TIMER3"]
    pub MDR_TIMER3: MDR_TIMER3,
    #[doc = "MDR_ADC"]
    pub MDR_ADC: MDR_ADC,
    #[doc = "MDR_DAC"]
    pub MDR_DAC: MDR_DAC,
    #[doc = "MDR_COMP"]
    pub MDR_COMP: MDR_COMP,
    #[doc = "MDR_PORTA"]
    pub MDR_PORTA: MDR_PORTA,
    #[doc = "MDR_PORTB"]
    pub MDR_PORTB: MDR_PORTB,
    #[doc = "MDR_PORTC"]
    pub MDR_PORTC: MDR_PORTC,
    #[doc = "MDR_PORTD"]
    pub MDR_PORTD: MDR_PORTD,
    #[doc = "MDR_PORTE"]
    pub MDR_PORTE: MDR_PORTE,
    #[doc = "MDR_PORTF"]
    pub MDR_PORTF: MDR_PORTF,
    #[doc = "MDR_BKP"]
    pub MDR_BKP: MDR_BKP,
    #[doc = "MDR_EBC"]
    pub MDR_EBC: MDR_EBC,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            MDR_CAN1: MDR_CAN1 {
                _marker: PhantomData,
            },
            MDR_CAN2: MDR_CAN2 {
                _marker: PhantomData,
            },
            MDR_USB: MDR_USB {
                _marker: PhantomData,
            },
            MDR_EEPROM: MDR_EEPROM {
                _marker: PhantomData,
            },
            MDR_RST_CLK: MDR_RST_CLK {
                _marker: PhantomData,
            },
            MDR_DMA: MDR_DMA {
                _marker: PhantomData,
            },
            MDR_UART1: MDR_UART1 {
                _marker: PhantomData,
            },
            MDR_UART2: MDR_UART2 {
                _marker: PhantomData,
            },
            MDR_SSP1: MDR_SSP1 {
                _marker: PhantomData,
            },
            MDR_SSP2: MDR_SSP2 {
                _marker: PhantomData,
            },
            MDR_I2C: MDR_I2C {
                _marker: PhantomData,
            },
            MDR_POWER: MDR_POWER {
                _marker: PhantomData,
            },
            MDR_WWDG: MDR_WWDG {
                _marker: PhantomData,
            },
            MDR_IWDG: MDR_IWDG {
                _marker: PhantomData,
            },
            MDR_TIMER1: MDR_TIMER1 {
                _marker: PhantomData,
            },
            MDR_TIMER2: MDR_TIMER2 {
                _marker: PhantomData,
            },
            MDR_TIMER3: MDR_TIMER3 {
                _marker: PhantomData,
            },
            MDR_ADC: MDR_ADC {
                _marker: PhantomData,
            },
            MDR_DAC: MDR_DAC {
                _marker: PhantomData,
            },
            MDR_COMP: MDR_COMP {
                _marker: PhantomData,
            },
            MDR_PORTA: MDR_PORTA {
                _marker: PhantomData,
            },
            MDR_PORTB: MDR_PORTB {
                _marker: PhantomData,
            },
            MDR_PORTC: MDR_PORTC {
                _marker: PhantomData,
            },
            MDR_PORTD: MDR_PORTD {
                _marker: PhantomData,
            },
            MDR_PORTE: MDR_PORTE {
                _marker: PhantomData,
            },
            MDR_PORTF: MDR_PORTF {
                _marker: PhantomData,
            },
            MDR_BKP: MDR_BKP {
                _marker: PhantomData,
            },
            MDR_EBC: MDR_EBC {
                _marker: PhantomData,
            },
        }
    }
}
